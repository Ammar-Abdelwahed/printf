#include "main.h"
/**
*print_pointer - Prints the value of a pointer variable
*@types: List a of arguments
*@buffer: Buffer array to handle print
*@flags: Calculates active flags
*@width: get width
*@precision: Precision specification
*@size: Size specifier
*Return: Number of chars printed.
*/
int print_pointer(va_list types, char buffer[],
		  int flags, __attribute__((__unused__)) int width,
		  __attribute__((__unused__)) int precision,
		  __attribute__((__unused__))int size)
{
char extra_c = 0, padd = ' ';
int ind = 1024 - 2, length = 2, padd_start = 1;
unsigned long n_addrs;
char map_to[] = "0123456789abcdef";
void *addrs = va_arg(types, void *);
if (addrs == NULL)
return (write(1, "(nil)", 5));
buffer[1024 - 1] = '\0';
n_addrs = (unsigned long)addrs;
while (n_addrs > 0)
{
buffer[ind--] = map_to[n_addrs % 16];
n_addrs /= 16;
length++;
}
if ((flags & ZERO) && !(flags & MINUS))
padd = '0';
if (flags & PLUS)
extra_c = '+', length++;
else if (flags & SPACE)
extra_c = ' ', length++;
ind++;
return (write_pointer(buffer, ind, length,
width, flags, padd, extra_c, padd_start));
}
/**
* print_non_printable - Prints ascii codes in hexa of non printable chars
* @types: Lista of arguments
* @buffer: Buffer array to handle print
* @flags: Calculates active flags
* @width: get width
* @precision: Precision specification
* @size: Size specifier
* Return: Number of chars printed
*/
int print_non_printable(va_list types, char buffer[],
			__attribute__((__unused__))int flags,
			__attribute__((__unused__))int width,
			__attribute__((__unused__))int precision,
			__attribute__((__unused__))int size)
{
int i = 0, offset = 0;
char *str = va_arg(types, char *);
if (str == NULL)
return (write(1, "(null)", 6));
while (str[i] != '\0')
{
if (is_printable(str[i]))
buffer[i + offset] = str[i];
else
offset += append_hexa_code(str[i], buffer, i + offset);
i++;
}
buffer[i + offset] = '\0';
return (write(1, buffer, i + offset));
}
/**
*print_reverse - Prints reverse string.
*@types: Lista of arguments
*@buffer: Buffer array to handle print
*@flags: Calculates active flags
*@width: get width
*@precision: Precision specification
*@size: Size specifier
*Return: Numbers of chars printed
*/
int print_reverse(va_list types, char __attribute__((__unused__)) buffer[],
		  int __attribute__((__unused__)) flags,
		  int __attribute__((__unused__)) width,
		  int __attribute__((__unused__)) precision,
		  int __attribute__((__unused__)) size)
{
char *str;
int i, count = 0;
str = va_arg(types, char *);
if (str == NULL)
str = ")Null(";
for (i = 0; str[i]; i++)
;
for (i = i - 1; i >= 0; i--)
{
char z = str[i];
write(1, &z, 1);
count++;
}
return (count);
}
/**
*print_rot13string - Print a string in rot13.
*@types: Lista of arguments
*@buffer: Buffer array to handle print
*@flags: Calculates active flags
*@width: get width
*@precision: Precision specification
*@size: Size specifier
*Return: Numbers of chars printed
*/
int print_rot13string(va_list types,
		      char __attribute__((__unused__)) buffer[],
		      int __attribute__((__unused__)) flags,
		      int __attribute__((__unused__)) width,
		      int __attribute__((__unused__)) precision,
		      int __attribute__((__unused__)) size)
{
char x;
char *str;
unsigned int i, j;
int count = 0;
char in[] =
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
char out[] =
"NOPQRSTUVWXYZABCDEFGHIJKLMnopqrstuvwxyzabcdefghijklm";
str = va_arg(types, char *);
if (str == NULL)
str = "(AHYY)";
for (i = 0; str[i]; i++)
{
for (j = 0; in[j]; j++)
{
if (in[j] == str[i])
{
x = out[j];
write(1, &x, 1);
count++;
break;
}
}
if (!in[j])
{
x = str[i];
write(1, &x, 1);
count++;
}
}
return (count);
}
